// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Workflow {
  id String @id @default(cuid())
  userId String
  name String
  description String?

  definition String
  executionPlan String?
  creditsCost Int @default(0)

  cron String? // cron string e.g. * * * * * 
  
  status String // DRAFT | PUBLISHED

  lastRunAt DateTime?
  lastRunId String?
  lastRunStatus String?
  nextRunAt DateTime? // next run date based on cron job

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  executions WorkflowExecution[]

  // user can't have two workflows with the same name
  @@unique([name, userId])
}

model WorkflowExecution {
  id String @id @default(cuid())
  workflowId String
  userId String // added to filter without joining
  trigger String
  status String
  createdAt DateTime @default(now())
  startedAt DateTime?
  completedAt DateTime?
  definition String @default("{}")

  creditsConsumed Int @default(0)

  phases ExecutionPhase[]

  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
}

model ExecutionPhase {
  id String @id @default(cuid())
  userId String
  status String // status of each individual task
  number Int // phase number
  node String
  name String
  startedAt DateTime?
  completedAt DateTime?
  inputs String?
  outputs String?

  creditsConsumed Int? // optional since when a previous task fails the following will not be executed

  workflowExecutionId String
  execution WorkflowExecution @relation(fields: [workflowExecutionId], references: [id], onDelete: Cascade)

  logs ExecutionLog[]
}

model ExecutionLog {
  id String @id @default(cuid())
  logLevel String
  message String
  timestamp DateTime @default(now())

  executionPhaseId String
  executionPhase ExecutionPhase @relation(fields: [executionPhaseId], references: [id], onDelete: Cascade)
}

model UserBalance {
  userId String @id
  credits Int @default(0)
}

model Credential {
  id String @id @default(cuid())
  userId String
  name String
  value String

  createdAt DateTime @default(now())
  
  @@unique([userId, name])
}

model UserPurchase {
  id String @id @default(cuid())
  userId String
  stripeId String // event ID
  description String
  amount Int
  currency String
  date DateTime @default(now())
}